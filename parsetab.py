
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY BEGIN BREAK CASE CHAR COMMENT CONST CONTINUE DEFAULT DIV DO DOWNTO ELSE END EXIT FILE FOR FORWARD FUNCTION GOTO ID IF IN INT LABEL MOD NIL NOT OF OR PACKED PROCEDURE PROGRAM READ READLN REAL RECORD REPEAT SET SIZEOF STR SYM_ADD SYM_ASSIGN SYM_AT SYM_CARET SYM_COLON SYM_COMMA SYM_DIV SYM_DOT SYM_EQ SYM_GE SYM_GT SYM_LBRAC SYM_LE SYM_LPAREN SYM_LT SYM_MUL SYM_NE SYM_RANGE SYM_RBRAC SYM_RPAREN SYM_SEMICOLON SYM_SUB SYS_CONST SYS_FUNCT SYS_PROC SYS_TYPE THEN TO TYPE UNTIL VAR WHILE WITH XORprogram : program_head routine SYM_DOTprogram_head : PROGRAM ID SYM_SEMICOLONroutine : routine_head routine_bodysub_routine : routine_head routine_bodyroutine_head : label_part const_part type_part var_part routine_partlabel_part : epsilonconst_part : CONST const_expr_listconst_part : epsilonconst_expr_list : const_expr_list ID SYM_EQ const_value SYM_SEMICOLONconst_expr_list : ID SYM_EQ const_value SYM_SEMICOLONconst_expr_list : const_expr_list ID SYM_EQ SYM_SUB const_value SYM_SEMICOLONconst_expr_list : ID SYM_EQ SYM_SUB const_value SYM_SEMICOLONconst_value : INTconst_value : REALconst_value : CHARconst_value : STRconst_value : SYS_CONSTtype_part : TYPE type_decl_listtype_part : epsilontype_decl_list : type_decl_list type_deftype_decl_list : type_deftype_def : ID SYM_EQ type_decl SYM_SEMICOLONtype_decl : simple_type_decltype_decl : array_type_decltype_decl : record_type_declsimple_type_decl : SYS_TYPEsimple_type_decl : IDsimple_type_decl : SYM_LPAREN name_list SYM_RPARENsimple_type_decl : const_value SYM_RANGE const_valuesimple_type_decl : SYM_SUB const_value SYM_RANGE const_valuesimple_type_decl : SYM_SUB const_value SYM_RANGE SYM_SUB const_valuesimple_type_decl : ID SYM_RANGE IDarray_type_decl : ARRAY SYM_LBRAC simple_type_decl SYM_RBRAC OF type_declrecord_type_decl : RECORD field_decl_list ENDfield_decl_list : field_decl_list field_declfield_decl_list : field_declfield_decl : name_list SYM_COLON type_decl SYM_SEMICOLONname_list : name_list SYM_COMMA IDname_list : IDvar_part : VAR var_decl_listvar_part : epsilonvar_decl_list : var_decl_list var_declvar_decl_list : var_declvar_decl : name_list SYM_COLON type_decl SYM_SEMICOLONroutine_part : routine_part func_declroutine_part : routine_part procedure_declroutine_part : func_declroutine_part : procedure_declroutine_part : epsilonfunc_decl : func_head SYM_SEMICOLON sub_routine SYM_SEMICOLONfunc_head : FUNCTION ID parameters SYM_COLON simple_type_declprocedure_decl : procedure_head SYM_SEMICOLON sub_routine SYM_SEMICOLONprocedure_head : PROCEDURE ID parametersparameters : SYM_LPAREN para_decl_list SYM_RPARENparameters : epsilonpara_decl_list : para_decl_list SYM_SEMICOLON para_type_listpara_decl_list : para_type_listpara_type_list : var_para_list SYM_COLON simple_type_declpara_type_list : val_para_list SYM_COLON simple_type_declvar_para_list : VAR name_listval_para_list : name_listroutine_body : compound_stmtcompound_stmt : BEGIN stmt_list ENDstmt_list : stmt_list stmt SYM_SEMICOLONstmt_list : epsilonstmt : INT SYM_COLON unlabelled_stmtstmt : unlabelled_stmtunlabelled_stmt : assign_stmtunlabelled_stmt : proc_stmtunlabelled_stmt : compound_stmtunlabelled_stmt : if_stmtunlabelled_stmt : repeat_stmtunlabelled_stmt : while_stmtunlabelled_stmt : for_stmtunlabelled_stmt : case_stmtunlabelled_stmt : goto_stmtassign_stmt : ID SYM_ASSIGN expressionassign_stmt : ID SYM_LBRAC expression SYM_RBRAC SYM_ASSIGN expressionassign_stmt : ID SYM_DOT ID SYM_ASSIGN expressionproc_stmt : IDproc_stmt : ID SYM_LPAREN args_list SYM_RPARENproc_stmt : SYS_PROCproc_stmt : SYS_PROC SYM_LPAREN expression_list SYM_RPARENproc_stmt : READ SYM_LPAREN factor SYM_RPARENif_stmt : IF expression THEN stmt else_clauseelse_clause : ELSE stmtelse_clause : epsilonrepeat_stmt : REPEAT stmt_list UNTIL expressionwhile_stmt : WHILE expression DO stmtfor_stmt : FOR ID SYM_ASSIGN expression direction expression DO stmtdirection : TOdirection : DOWNTOcase_stmt : CASE expression OF case_expr_list ENDcase_expr_list : case_expr_list case_exprcase_expr_list : case_exprcase_expr : const_value SYM_COLON stmt SYM_SEMICOLONcase_expr : ID SYM_COLON stmt SYM_SEMICOLONgoto_stmt : GOTO INTexpression_list : expression_list SYM_COMMA expressionexpression_list : expressionexpression : expression SYM_GE exprexpression : expression SYM_GT exprexpression : expression SYM_LE exprexpression : expression SYM_LT exprexpression : expression SYM_EQ exprexpression : expression SYM_NE exprexpression : exprexpr : expr SYM_ADD termexpr : expr SYM_SUB termexpr : expr OR termexpr : termterm : term SYM_MUL factorterm : term SYM_DIV factorterm : term MOD factorterm : term AND factorterm : factorfactor : IDfactor : ID SYM_LPAREN args_list SYM_RPARENfactor : SYS_FUNCTfactor : SYS_FUNCT SYM_LPAREN args_list SYM_RPARENfactor : const_valuefactor : SYM_LPAREN expression SYM_RPARENfactor : NOT factorfactor : SYM_SUB factorfactor : ID SYM_LBRAC expression SYM_RBRACfactor : ID SYM_DOT ID args_list : args_list SYM_COMMA expressionargs_list : expressionepsilon : '
    
_lr_action_items = {'PROGRAM':([0,],[3,]),'$end':([1,9,],[0,-1,]),'CONST':([2,6,7,16,135,136,],[-129,14,-6,-2,-129,-129,]),'TYPE':([2,6,7,13,15,16,22,135,136,155,208,210,247,],[-129,-129,-6,20,-8,-2,-7,-129,-129,-10,-9,-12,-11,]),'VAR':([2,6,7,13,15,16,19,21,22,49,50,94,135,136,155,194,200,208,210,247,255,],[-129,-129,-6,-129,-8,-2,47,-19,-7,-18,-21,-20,-129,-129,-10,236,-22,-9,-12,-11,236,]),'FUNCTION':([2,6,7,13,15,16,19,21,22,46,48,49,50,82,83,84,85,90,91,94,133,134,135,136,139,155,200,208,210,228,230,238,247,],[-129,-129,-6,-129,-8,-2,-129,-19,-7,88,-41,-18,-21,88,-47,-48,-49,-40,-43,-20,-45,-46,-129,-129,-42,-10,-22,-9,-12,-50,-52,-44,-11,]),'PROCEDURE':([2,6,7,13,15,16,19,21,22,46,48,49,50,82,83,84,85,90,91,94,133,134,135,136,139,155,200,208,210,228,230,238,247,],[-129,-129,-6,-129,-8,-2,-129,-19,-7,89,-41,-18,-21,89,-47,-48,-49,-40,-43,-20,-45,-46,-129,-129,-42,-10,-22,-9,-12,-50,-52,-44,-11,]),'BEGIN':([2,5,6,7,12,13,15,16,17,18,19,21,22,41,46,48,49,50,54,55,77,82,83,84,85,90,91,94,108,130,133,134,135,136,139,155,191,200,208,210,216,226,227,228,230,238,247,263,],[-129,12,-129,-6,-129,-129,-8,-2,12,-65,-129,-19,-7,-129,-129,-41,-18,-21,-64,12,12,-5,-47,-48,-49,-40,-43,-20,12,12,-45,-46,-129,-129,-42,-10,12,-22,-9,-12,12,12,12,-50,-52,-44,-11,12,]),'ID':([3,12,14,17,18,20,22,40,41,42,43,44,47,49,50,54,55,56,57,58,59,60,61,65,68,71,77,88,89,90,91,94,95,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,127,129,130,131,132,139,140,141,148,152,155,158,160,162,186,187,194,199,200,204,205,206,208,210,211,216,221,222,223,225,226,227,231,236,238,245,246,247,255,256,257,263,264,265,270,271,],[8,-129,23,37,-65,51,52,67,-129,67,79,67,93,51,-21,-64,37,67,67,102,67,67,67,67,67,67,37,137,138,93,-43,-20,142,37,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,180,67,67,37,67,189,-42,142,198,93,93,-10,67,67,67,189,-95,93,239,-22,142,93,-36,-9,-12,67,37,67,-91,-92,-94,37,37,142,93,-44,-35,142,-11,93,142,142,37,-96,-97,142,-37,]),'SYM_DOT':([4,10,11,24,37,67,],[9,-3,-62,-63,58,125,]),'SYM_SEMICOLON':([8,11,24,25,27,28,29,30,31,32,33,34,35,36,37,38,63,64,66,67,69,70,72,73,74,75,76,81,86,87,97,99,100,122,128,138,142,143,144,145,146,147,153,156,159,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,183,184,190,192,195,196,197,209,212,215,217,218,219,220,224,229,232,233,239,240,241,244,248,249,251,252,253,254,260,262,266,267,268,269,272,273,],[16,-62,-63,54,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-80,-82,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-98,135,136,155,-66,-77,-124,-123,-129,-27,200,-23,-24,-25,-26,208,210,-81,-83,-84,-129,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,-88,-89,228,230,-55,-53,238,247,-79,-85,-87,-118,-125,-120,-93,-4,255,-57,-32,-28,-29,-34,-78,-86,264,265,-51,-54,-30,271,-56,-58,-59,-31,-90,-33,]),'END':([12,17,18,54,186,187,205,206,225,245,264,265,271,],[-129,24,-65,-64,224,-95,244,-36,-94,-35,-96,-97,-37,]),'INT':([12,17,18,40,41,42,44,45,53,54,56,57,59,60,61,65,68,71,77,95,96,98,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,130,131,132,140,150,154,158,160,162,186,187,202,204,211,216,221,222,223,225,226,227,231,242,246,256,257,259,263,264,265,270,],[-129,26,-65,72,-129,72,72,81,72,-64,72,72,72,72,72,72,72,72,26,72,72,72,26,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,26,72,72,72,72,72,72,72,72,72,-95,72,72,72,26,72,-91,-92,-94,26,26,72,72,72,72,72,72,26,-96,-97,72,]),'SYS_PROC':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,38,-65,-129,-64,38,38,38,38,38,38,38,38,]),'READ':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,39,-65,-129,-64,39,39,39,39,39,39,39,39,]),'IF':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,40,-65,-129,-64,40,40,40,40,40,40,40,40,]),'REPEAT':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,41,-65,-129,-64,41,41,41,41,41,41,41,41,]),'WHILE':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,42,-65,-129,-64,42,42,42,42,42,42,42,42,]),'FOR':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,43,-65,-129,-64,43,43,43,43,43,43,43,43,]),'CASE':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,44,-65,-129,-64,44,44,44,44,44,44,44,44,]),'GOTO':([12,17,18,41,54,55,77,108,130,216,226,227,263,],[-129,45,-65,-129,-64,45,45,45,45,45,45,45,45,]),'UNTIL':([18,41,54,77,],[-65,-129,-64,129,]),'SYM_EQ':([23,51,52,62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[53,95,96,113,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,113,113,113,113,113,113,-124,113,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,113,-126,-122,113,113,113,113,113,-118,-125,-120,113,113,]),'ELSE':([24,27,28,29,30,31,32,33,34,35,36,37,38,63,64,66,67,69,70,72,73,74,75,76,81,99,100,122,128,159,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,183,184,212,215,217,218,219,220,224,248,249,272,],[-63,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-80,-82,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-98,-66,-77,-124,-123,-81,-83,-84,216,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,-88,-89,-79,-85,-87,-118,-125,-120,-93,-78,-86,-90,]),'SYM_COLON':([26,72,73,74,75,76,92,93,137,188,189,193,195,198,207,234,235,237,254,258,],[55,-13,-14,-15,-16,-17,140,-39,-129,226,227,231,-55,-38,246,256,257,-61,-54,-60,]),'SYM_ASSIGN':([37,79,102,157,],[56,131,158,211,]),'SYM_LBRAC':([37,67,151,],[57,124,204,]),'SYM_LPAREN':([37,38,39,40,42,44,56,57,59,60,61,65,67,68,69,71,95,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,137,138,140,158,160,162,204,211,221,222,223,231,246,256,257,270,],[59,60,61,68,68,68,68,68,68,68,68,68,123,68,127,68,148,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,194,194,148,68,68,68,148,68,68,-91,-92,148,148,148,148,148,]),'SYS_FUNCT':([40,42,44,56,57,59,60,61,65,68,71,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,158,160,162,211,221,222,223,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-91,-92,]),'NOT':([40,42,44,56,57,59,60,61,65,68,71,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,158,160,162,211,221,222,223,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-91,-92,]),'SYM_SUB':([40,42,44,53,56,57,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,95,96,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,131,140,158,160,162,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,204,211,218,219,220,221,222,223,231,242,246,256,257,270,],[65,65,65,98,65,65,65,65,65,116,-111,65,-116,-117,65,-119,-121,65,-13,-14,-15,-16,-17,150,154,65,65,65,65,65,65,65,65,65,65,65,65,65,-124,65,65,65,-123,65,65,150,65,65,65,116,116,116,116,116,116,-108,-109,-110,-112,-113,-114,-115,-126,-122,150,65,-118,-125,-120,65,-91,-92,150,259,150,150,150,150,]),'REAL':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,132,140,150,154,158,160,162,186,187,202,204,211,221,222,223,225,231,242,246,256,257,259,264,265,270,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-95,73,73,73,73,-91,-92,-94,73,73,73,73,73,73,-96,-97,73,]),'CHAR':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,132,140,150,154,158,160,162,186,187,202,204,211,221,222,223,225,231,242,246,256,257,259,264,265,270,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-95,74,74,74,74,-91,-92,-94,74,74,74,74,74,74,-96,-97,74,]),'STR':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,132,140,150,154,158,160,162,186,187,202,204,211,221,222,223,225,231,242,246,256,257,259,264,265,270,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-95,75,75,75,75,-91,-92,-94,75,75,75,75,75,75,-96,-97,75,]),'SYS_CONST':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,132,140,150,154,158,160,162,186,187,202,204,211,221,222,223,225,231,242,246,256,257,259,264,265,270,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-95,76,76,76,76,-91,-92,-94,76,76,76,76,76,76,-96,-97,76,]),'THEN':([62,63,64,66,67,69,70,72,73,74,75,76,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,218,219,220,],[108,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'SYM_GE':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[109,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,109,109,109,109,109,109,-124,109,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,109,-126,-122,109,109,109,109,109,-118,-125,-120,109,109,]),'SYM_GT':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[110,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,110,110,110,110,110,110,-124,110,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,110,-126,-122,110,110,110,110,110,-118,-125,-120,110,110,]),'SYM_LE':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[111,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,111,111,111,111,111,111,-124,111,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,111,-126,-122,111,111,111,111,111,-118,-125,-120,111,111,]),'SYM_LT':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[112,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,112,112,112,112,112,112,-124,112,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,112,-126,-122,112,112,112,112,112,-118,-125,-120,112,112,]),'SYM_NE':([62,63,64,66,67,69,70,72,73,74,75,76,78,80,100,101,104,106,122,126,128,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,183,185,212,213,214,218,219,220,248,250,],[114,-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,114,114,114,114,114,114,-124,114,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,114,-126,-122,114,114,114,114,114,-118,-125,-120,114,114,]),'DO':([63,64,66,67,69,70,72,73,74,75,76,78,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,218,219,220,250,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,130,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,-118,-125,-120,263,]),'OF':([63,64,66,67,69,70,72,73,74,75,76,80,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,218,219,220,261,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,132,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,-118,-125,-120,270,]),'SYM_RBRAC':([63,64,66,67,69,70,72,73,74,75,76,101,122,128,142,147,165,166,167,168,169,170,171,172,173,174,175,176,177,179,180,181,218,219,220,239,240,241,243,260,269,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,157,-124,-123,-27,-26,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,219,-126,-122,-118,-125,-120,-32,-28,-29,261,-30,-31,]),'SYM_RPAREN':([63,64,66,67,69,70,72,73,74,75,76,93,103,104,105,106,107,122,126,128,142,147,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,198,201,213,214,218,219,220,232,233,239,240,241,260,266,267,268,269,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-39,159,-128,161,-100,163,-124,181,-123,-27,-26,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,218,-126,-122,220,-38,240,-127,-99,-118,-125,-120,254,-57,-32,-28,-29,-30,-56,-58,-59,-31,]),'SYM_COMMA':([63,64,66,67,69,70,72,73,74,75,76,92,93,103,104,105,106,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,198,201,207,213,214,218,219,220,237,258,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,141,-39,160,-128,162,-100,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,160,-126,-122,160,-38,141,141,-127,-99,-118,-125,-120,141,141,]),'TO':([63,64,66,67,69,70,72,73,74,75,76,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,185,218,219,220,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,222,-118,-125,-120,]),'DOWNTO':([63,64,66,67,69,70,72,73,74,75,76,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,185,218,219,220,],[-107,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,-101,-102,-103,-104,-105,-106,-108,-109,-110,-112,-113,-114,-115,-126,-122,223,-118,-125,-120,]),'SYM_ADD':([63,64,66,67,69,70,72,73,74,75,76,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,218,219,220,],[115,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,115,115,115,115,115,115,-108,-109,-110,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'OR':([63,64,66,67,69,70,72,73,74,75,76,122,128,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,218,219,220,],[117,-111,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,117,117,117,117,117,117,-108,-109,-110,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'SYM_MUL':([64,66,67,69,70,72,73,74,75,76,122,128,171,172,173,174,175,176,177,180,181,218,219,220,],[118,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,118,118,118,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'SYM_DIV':([64,66,67,69,70,72,73,74,75,76,122,128,171,172,173,174,175,176,177,180,181,218,219,220,],[119,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,119,119,119,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'MOD':([64,66,67,69,70,72,73,74,75,76,122,128,171,172,173,174,175,176,177,180,181,218,219,220,],[120,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,120,120,120,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'AND':([64,66,67,69,70,72,73,74,75,76,122,128,171,172,173,174,175,176,177,180,181,218,219,220,],[121,-116,-117,-119,-121,-13,-14,-15,-16,-17,-124,-123,121,121,121,-112,-113,-114,-115,-126,-122,-118,-125,-120,]),'SYM_RANGE':([72,73,74,75,76,142,149,203,],[-13,-14,-15,-16,-17,199,202,242,]),'SYS_TYPE':([95,140,204,231,246,256,257,270,],[147,147,147,147,147,147,147,147,]),'ARRAY':([95,140,246,270,],[151,151,151,151,]),'RECORD':([95,140,246,270,],[152,152,152,152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_head':([0,],[2,]),'routine':([2,],[4,]),'routine_head':([2,135,136,],[5,191,191,]),'label_part':([2,135,136,],[6,6,6,]),'epsilon':([2,6,12,13,19,41,46,135,136,137,138,164,],[7,15,18,21,48,18,85,7,7,195,195,217,]),'routine_body':([5,191,],[10,229,]),'compound_stmt':([5,17,55,77,108,130,191,216,226,227,263,],[11,30,30,30,30,30,11,30,30,30,30,]),'const_part':([6,],[13,]),'stmt_list':([12,41,],[17,77,]),'type_part':([13,],[19,]),'const_expr_list':([14,],[22,]),'stmt':([17,77,108,130,216,226,227,263,],[25,25,164,184,249,251,252,272,]),'unlabelled_stmt':([17,55,77,108,130,216,226,227,263,],[27,99,27,27,27,27,27,27,27,]),'assign_stmt':([17,55,77,108,130,216,226,227,263,],[28,28,28,28,28,28,28,28,28,]),'proc_stmt':([17,55,77,108,130,216,226,227,263,],[29,29,29,29,29,29,29,29,29,]),'if_stmt':([17,55,77,108,130,216,226,227,263,],[31,31,31,31,31,31,31,31,31,]),'repeat_stmt':([17,55,77,108,130,216,226,227,263,],[32,32,32,32,32,32,32,32,32,]),'while_stmt':([17,55,77,108,130,216,226,227,263,],[33,33,33,33,33,33,33,33,33,]),'for_stmt':([17,55,77,108,130,216,226,227,263,],[34,34,34,34,34,34,34,34,34,]),'case_stmt':([17,55,77,108,130,216,226,227,263,],[35,35,35,35,35,35,35,35,35,]),'goto_stmt':([17,55,77,108,130,216,226,227,263,],[36,36,36,36,36,36,36,36,36,]),'var_part':([19,],[46,]),'type_decl_list':([20,],[49,]),'type_def':([20,49,],[50,94,]),'expression':([40,42,44,56,57,59,60,68,123,124,127,129,131,158,160,162,211,221,],[62,78,80,100,101,104,106,126,104,179,104,183,185,212,213,214,248,250,]),'expr':([40,42,44,56,57,59,60,68,109,110,111,112,113,114,123,124,127,129,131,158,160,162,211,221,],[63,63,63,63,63,63,63,63,165,166,167,168,169,170,63,63,63,63,63,63,63,63,63,63,]),'term':([40,42,44,56,57,59,60,68,109,110,111,112,113,114,115,116,117,123,124,127,129,131,158,160,162,211,221,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,171,172,173,64,64,64,64,64,64,64,64,64,64,]),'factor':([40,42,44,56,57,59,60,61,65,68,71,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,158,160,162,211,221,],[66,66,66,66,66,66,66,107,122,66,128,66,66,66,66,66,66,66,66,66,174,175,176,177,66,66,66,66,66,66,66,66,66,66,]),'const_value':([40,42,44,53,56,57,59,60,61,65,68,71,95,96,98,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,127,129,131,132,140,150,154,158,160,162,186,202,204,211,221,231,242,246,256,257,259,270,],[70,70,70,97,70,70,70,70,70,70,70,70,149,153,156,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,188,149,203,209,70,70,70,188,241,149,70,70,149,260,149,149,149,269,149,]),'routine_part':([46,],[82,]),'func_decl':([46,82,],[83,133,]),'procedure_decl':([46,82,],[84,134,]),'func_head':([46,82,],[86,86,]),'procedure_head':([46,82,],[87,87,]),'var_decl_list':([47,],[90,]),'var_decl':([47,90,],[91,139,]),'name_list':([47,90,148,152,194,205,236,255,],[92,92,201,207,237,207,258,237,]),'args_list':([59,123,127,],[103,178,182,]),'expression_list':([60,],[105,]),'type_decl':([95,140,246,270,],[143,197,262,273,]),'simple_type_decl':([95,140,204,231,246,256,257,270,],[144,144,243,253,144,267,268,144,]),'array_type_decl':([95,140,246,270,],[145,145,145,145,]),'record_type_decl':([95,140,246,270,],[146,146,146,146,]),'case_expr_list':([132,],[186,]),'case_expr':([132,186,],[187,225,]),'sub_routine':([135,136,],[190,192,]),'parameters':([137,138,],[193,196,]),'field_decl_list':([152,],[205,]),'field_decl':([152,205,],[206,245,]),'else_clause':([164,],[215,]),'direction':([185,],[221,]),'para_decl_list':([194,],[232,]),'para_type_list':([194,255,],[233,266,]),'var_para_list':([194,255,],[234,234,]),'val_para_list':([194,255,],[235,235,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program_head routine SYM_DOT','program',3,'p_program','parse.py',21),
  ('program_head -> PROGRAM ID SYM_SEMICOLON','program_head',3,'p_program_head','parse.py',26),
  ('routine -> routine_head routine_body','routine',2,'p_routine','parse.py',32),
  ('sub_routine -> routine_head routine_body','sub_routine',2,'p_sub_routine','parse.py',37),
  ('routine_head -> label_part const_part type_part var_part routine_part','routine_head',5,'p_routine_head','parse.py',42),
  ('label_part -> epsilon','label_part',1,'p_label_part','parse.py',48),
  ('const_part -> CONST const_expr_list','const_part',2,'p_const_part_0','parse.py',54),
  ('const_part -> epsilon','const_part',1,'p_const_part_1','parse.py',59),
  ('const_expr_list -> const_expr_list ID SYM_EQ const_value SYM_SEMICOLON','const_expr_list',5,'p_const_expr_list_0','parse.py',64),
  ('const_expr_list -> ID SYM_EQ const_value SYM_SEMICOLON','const_expr_list',4,'p_const_expr_list_1','parse.py',71),
  ('const_expr_list -> const_expr_list ID SYM_EQ SYM_SUB const_value SYM_SEMICOLON','const_expr_list',6,'p_const_expr_list_2','parse.py',78),
  ('const_expr_list -> ID SYM_EQ SYM_SUB const_value SYM_SEMICOLON','const_expr_list',5,'p_const_expr_list_3','parse.py',85),
  ('const_value -> INT','const_value',1,'p_const_value_0','parse.py',92),
  ('const_value -> REAL','const_value',1,'p_const_value_1','parse.py',97),
  ('const_value -> CHAR','const_value',1,'p_const_value_2','parse.py',102),
  ('const_value -> STR','const_value',1,'p_const_value_3','parse.py',107),
  ('const_value -> SYS_CONST','const_value',1,'p_const_value_4','parse.py',112),
  ('type_part -> TYPE type_decl_list','type_part',2,'p_type_part_0','parse.py',118),
  ('type_part -> epsilon','type_part',1,'p_type_part_1','parse.py',123),
  ('type_decl_list -> type_decl_list type_def','type_decl_list',2,'p_type_decl_list_0','parse.py',128),
  ('type_decl_list -> type_def','type_decl_list',1,'p_type_decl_list_1','parse.py',133),
  ('type_def -> ID SYM_EQ type_decl SYM_SEMICOLON','type_def',4,'p_type_def','parse.py',138),
  ('type_decl -> simple_type_decl','type_decl',1,'p_type_decl_0','parse.py',147),
  ('type_decl -> array_type_decl','type_decl',1,'p_type_decl_1','parse.py',152),
  ('type_decl -> record_type_decl','type_decl',1,'p_type_decl_2','parse.py',157),
  ('simple_type_decl -> SYS_TYPE','simple_type_decl',1,'p_simple_type_decl_0','parse.py',162),
  ('simple_type_decl -> ID','simple_type_decl',1,'p_simple_type_decl_1','parse.py',167),
  ('simple_type_decl -> SYM_LPAREN name_list SYM_RPAREN','simple_type_decl',3,'p_simple_type_decl_2','parse.py',172),
  ('simple_type_decl -> const_value SYM_RANGE const_value','simple_type_decl',3,'p_simple_type_decl_3','parse.py',178),
  ('simple_type_decl -> SYM_SUB const_value SYM_RANGE const_value','simple_type_decl',4,'p_simple_type_decl_4','parse.py',183),
  ('simple_type_decl -> SYM_SUB const_value SYM_RANGE SYM_SUB const_value','simple_type_decl',5,'p_simple_type_decl_5','parse.py',190),
  ('simple_type_decl -> ID SYM_RANGE ID','simple_type_decl',3,'p_simple_type_decl_6','parse.py',200),
  ('array_type_decl -> ARRAY SYM_LBRAC simple_type_decl SYM_RBRAC OF type_decl','array_type_decl',6,'p_array_type_decl','parse.py',206),
  ('record_type_decl -> RECORD field_decl_list END','record_type_decl',3,'p_record_type_decl','parse.py',212),
  ('field_decl_list -> field_decl_list field_decl','field_decl_list',2,'p_field_decl_list_0','parse.py',218),
  ('field_decl_list -> field_decl','field_decl_list',1,'p_field_decl_list_1','parse.py',223),
  ('field_decl -> name_list SYM_COLON type_decl SYM_SEMICOLON','field_decl',4,'p_field_decl','parse.py',228),
  ('name_list -> name_list SYM_COMMA ID','name_list',3,'p_name_list_0','parse.py',234),
  ('name_list -> ID','name_list',1,'p_name_list_1','parse.py',240),
  ('var_part -> VAR var_decl_list','var_part',2,'p_var_part_0','parse.py',246),
  ('var_part -> epsilon','var_part',1,'p_var_part_1','parse.py',251),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list_0','parse.py',256),
  ('var_decl_list -> var_decl','var_decl_list',1,'p_var_decl_list_1','parse.py',261),
  ('var_decl -> name_list SYM_COLON type_decl SYM_SEMICOLON','var_decl',4,'p_var_decl','parse.py',266),
  ('routine_part -> routine_part func_decl','routine_part',2,'p_routine_part_0','parse.py',273),
  ('routine_part -> routine_part procedure_decl','routine_part',2,'p_routine_part_1','parse.py',278),
  ('routine_part -> func_decl','routine_part',1,'p_routine_part_2','parse.py',283),
  ('routine_part -> procedure_decl','routine_part',1,'p_routine_part_3','parse.py',288),
  ('routine_part -> epsilon','routine_part',1,'p_routine_part_4','parse.py',293),
  ('func_decl -> func_head SYM_SEMICOLON sub_routine SYM_SEMICOLON','func_decl',4,'p_func_decl','parse.py',298),
  ('func_head -> FUNCTION ID parameters SYM_COLON simple_type_decl','func_head',5,'p_func_head','parse.py',304),
  ('procedure_decl -> procedure_head SYM_SEMICOLON sub_routine SYM_SEMICOLON','procedure_decl',4,'p_procedure_decl','parse.py',311),
  ('procedure_head -> PROCEDURE ID parameters','procedure_head',3,'p_procedure_head','parse.py',317),
  ('parameters -> SYM_LPAREN para_decl_list SYM_RPAREN','parameters',3,'p_parameters','parse.py',323),
  ('parameters -> epsilon','parameters',1,'p_parameters_e','parse.py',330),
  ('para_decl_list -> para_decl_list SYM_SEMICOLON para_type_list','para_decl_list',3,'p_para_decl_list_0','parse.py',335),
  ('para_decl_list -> para_type_list','para_decl_list',1,'p_para_decl_list_1','parse.py',341),
  ('para_type_list -> var_para_list SYM_COLON simple_type_decl','para_type_list',3,'p_para_type_list_0','parse.py',347),
  ('para_type_list -> val_para_list SYM_COLON simple_type_decl','para_type_list',3,'p_para_type_list_1','parse.py',352),
  ('var_para_list -> VAR name_list','var_para_list',2,'p_var_para_list','parse.py',357),
  ('val_para_list -> name_list','val_para_list',1,'p_val_para_list','parse.py',362),
  ('routine_body -> compound_stmt','routine_body',1,'p_routine_body','parse.py',368),
  ('compound_stmt -> BEGIN stmt_list END','compound_stmt',3,'p_compound_stmt','parse.py',373),
  ('stmt_list -> stmt_list stmt SYM_SEMICOLON','stmt_list',3,'p_stmt_list_0','parse.py',378),
  ('stmt_list -> epsilon','stmt_list',1,'p_stmt_list_1','parse.py',383),
  ('stmt -> INT SYM_COLON unlabelled_stmt','stmt',3,'p_stmt_0','parse.py',388),
  ('stmt -> unlabelled_stmt','stmt',1,'p_stmt_1','parse.py',393),
  ('unlabelled_stmt -> assign_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_0','parse.py',398),
  ('unlabelled_stmt -> proc_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_1','parse.py',403),
  ('unlabelled_stmt -> compound_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_2','parse.py',408),
  ('unlabelled_stmt -> if_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_3','parse.py',413),
  ('unlabelled_stmt -> repeat_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_4','parse.py',418),
  ('unlabelled_stmt -> while_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_5','parse.py',423),
  ('unlabelled_stmt -> for_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_6','parse.py',428),
  ('unlabelled_stmt -> case_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_7','parse.py',433),
  ('unlabelled_stmt -> goto_stmt','unlabelled_stmt',1,'p_unlabelled_stmt_8','parse.py',438),
  ('assign_stmt -> ID SYM_ASSIGN expression','assign_stmt',3,'p_assign_stmt_0','parse.py',443),
  ('assign_stmt -> ID SYM_LBRAC expression SYM_RBRAC SYM_ASSIGN expression','assign_stmt',6,'p_assign_stmt_1','parse.py',449),
  ('assign_stmt -> ID SYM_DOT ID SYM_ASSIGN expression','assign_stmt',5,'p_assign_stmt_2','parse.py',455),
  ('proc_stmt -> ID','proc_stmt',1,'p_proc_stmt_0','parse.py',461),
  ('proc_stmt -> ID SYM_LPAREN args_list SYM_RPAREN','proc_stmt',4,'p_proc_stmt_1','parse.py',466),
  ('proc_stmt -> SYS_PROC','proc_stmt',1,'p_proc_stmt_2','parse.py',472),
  ('proc_stmt -> SYS_PROC SYM_LPAREN expression_list SYM_RPAREN','proc_stmt',4,'p_proc_stmt_3','parse.py',477),
  ('proc_stmt -> READ SYM_LPAREN factor SYM_RPAREN','proc_stmt',4,'p_proc_stmt_4','parse.py',483),
  ('if_stmt -> IF expression THEN stmt else_clause','if_stmt',5,'p_if_stmt','parse.py',489),
  ('else_clause -> ELSE stmt','else_clause',2,'p_else_clause_0','parse.py',495),
  ('else_clause -> epsilon','else_clause',1,'p_else_clause_1','parse.py',500),
  ('repeat_stmt -> REPEAT stmt_list UNTIL expression','repeat_stmt',4,'p_repeat_stmt','parse.py',505),
  ('while_stmt -> WHILE expression DO stmt','while_stmt',4,'p_while_stmt','parse.py',511),
  ('for_stmt -> FOR ID SYM_ASSIGN expression direction expression DO stmt','for_stmt',8,'p_for_stmt','parse.py',516),
  ('direction -> TO','direction',1,'p_direction_0','parse.py',522),
  ('direction -> DOWNTO','direction',1,'p_direction_1','parse.py',527),
  ('case_stmt -> CASE expression OF case_expr_list END','case_stmt',5,'p_case_stmt','parse.py',532),
  ('case_expr_list -> case_expr_list case_expr','case_expr_list',2,'p_case_expr_list_0','parse.py',538),
  ('case_expr_list -> case_expr','case_expr_list',1,'p_case_expr_list_1','parse.py',543),
  ('case_expr -> const_value SYM_COLON stmt SYM_SEMICOLON','case_expr',4,'p_case_expr_1','parse.py',548),
  ('case_expr -> ID SYM_COLON stmt SYM_SEMICOLON','case_expr',4,'p_case_expr_2','parse.py',554),
  ('goto_stmt -> GOTO INT','goto_stmt',2,'p_goto_stmt','parse.py',560),
  ('expression_list -> expression_list SYM_COMMA expression','expression_list',3,'p_expression_list_0','parse.py',565),
  ('expression_list -> expression','expression_list',1,'p_expression_list_1','parse.py',570),
  ('expression -> expression SYM_GE expr','expression',3,'p_expression_0','parse.py',575),
  ('expression -> expression SYM_GT expr','expression',3,'p_expression_1','parse.py',580),
  ('expression -> expression SYM_LE expr','expression',3,'p_expression_2','parse.py',585),
  ('expression -> expression SYM_LT expr','expression',3,'p_expression_3','parse.py',590),
  ('expression -> expression SYM_EQ expr','expression',3,'p_expression_4','parse.py',595),
  ('expression -> expression SYM_NE expr','expression',3,'p_expression_5','parse.py',600),
  ('expression -> expr','expression',1,'p_expression_6','parse.py',605),
  ('expr -> expr SYM_ADD term','expr',3,'p_expr_0','parse.py',610),
  ('expr -> expr SYM_SUB term','expr',3,'p_expr_1','parse.py',615),
  ('expr -> expr OR term','expr',3,'p_expr_2','parse.py',620),
  ('expr -> term','expr',1,'p_expr_3','parse.py',625),
  ('term -> term SYM_MUL factor','term',3,'p_term_0','parse.py',630),
  ('term -> term SYM_DIV factor','term',3,'p_term_1','parse.py',635),
  ('term -> term MOD factor','term',3,'p_term_2','parse.py',640),
  ('term -> term AND factor','term',3,'p_term_3','parse.py',645),
  ('term -> factor','term',1,'p_term_4','parse.py',650),
  ('factor -> ID','factor',1,'p_factor_0','parse.py',655),
  ('factor -> ID SYM_LPAREN args_list SYM_RPAREN','factor',4,'p_factor_1','parse.py',660),
  ('factor -> SYS_FUNCT','factor',1,'p_factor_2','parse.py',666),
  ('factor -> SYS_FUNCT SYM_LPAREN args_list SYM_RPAREN','factor',4,'p_factor_3','parse.py',671),
  ('factor -> const_value','factor',1,'p_factor_4','parse.py',677),
  ('factor -> SYM_LPAREN expression SYM_RPAREN','factor',3,'p_factor_5','parse.py',682),
  ('factor -> NOT factor','factor',2,'p_factor_6','parse.py',688),
  ('factor -> SYM_SUB factor','factor',2,'p_factor_7','parse.py',693),
  ('factor -> ID SYM_LBRAC expression SYM_RBRAC','factor',4,'p_factor_8','parse.py',698),
  ('factor -> ID SYM_DOT ID','factor',3,'p_factor_9','parse.py',704),
  ('args_list -> args_list SYM_COMMA expression','args_list',3,'p_args_list_0','parse.py',710),
  ('args_list -> expression','args_list',1,'p_args_list_1','parse.py',715),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','parse.py',720),
]
